"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[427],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var i=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,s=function(e,n){if(null==e)return{};var t,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=l(t),f=s,p=d["".concat(c,".").concat(f)]||d[f]||h[f]||o;return t?i.createElement(p,a(a({ref:n},u),{},{components:t})):i.createElement(p,a({ref:n},u))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=d;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:s,a[1]=r;for(var l=2;l<o;l++)a[l]=t[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var i=t(7462),s=(t(7294),t(3905));const o={id:"genesis",title:"Genesis",sidebar_position:3,description:"Genesis configuration",keywords:["Genesis","Config"]},a=void 0,r={unversionedId:"consensus/genesis",id:"consensus/genesis",title:"Genesis",description:"Genesis configuration",source:"@site/docs/consensus/genesis.md",sourceDirName:"consensus",slug:"/consensus/genesis",permalink:"/docs/consensus/genesis",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"genesis",title:"Genesis",sidebar_position:3,description:"Genesis configuration",keywords:["Genesis","Config"]},sidebar:"tutorialSidebar",previous:{title:"Proof-of-Time",permalink:"/docs/consensus/consensus/pot"},next:{title:"Security",permalink:"/docs/consensus/security"}},c={},l=[],u={toc:l};function h(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The genesis process of a substrate blockchain involves the initialization and configuration of the blockchain's starting state. Substrate is a blockchain framework that enables the creation of customizable blockchains, and the genesis configuration is the foundation of every Substrate-based blockchain. Below, I describe the technical details of the genesis process for a Substrate blockchain:"),(0,s.kt)("p",null,"Genesis Configuration File: The genesis process begins with the creation of a genesis configuration file, often written in JSON. This file defines the initial parameters for the blockchain, such as the initial balances, authorities, and any other chain-specific configurations."),(0,s.kt)("p",null,"Specifying Runtime Modules: Substrate-based blockchains are modular, with different functionalities encapsulated in runtime modules. In the genesis configuration, the required runtime modules are specified, and initial parameters for each are set."),(0,s.kt)("p",null,"Consensus Configuration: The genesis configuration must include the settings for the consensus algorithm to be used, such as GRANDPA and BABE in Polkadot. This includes parameters like the initial validator set, epoch length, and other parameters specific to the consensus mechanism."),(0,s.kt)("p",null,"Balances and Accounts: The initial state of accounts, including balances for any native tokens, is defined in the genesis configuration. This also includes any predefined permissions or roles for specific accounts."),(0,s.kt)("p",null,"Pallet Configuration: Substrate uses pallets (previously known as runtime modules) to add functionality to the blockchain. During the genesis process, the configuration for each pallet is defined. This includes things like initial governance parameters, staking conditions, fees, and other module-specific settings."),(0,s.kt)("p",null,"WASM Runtime Compilation: Substrate-based blockchains use WebAssembly (WASM) to execute their runtime logic. The runtime logic, including the specified pallets and custom logic, is compiled into a WASM binary."),(0,s.kt)("p",null,"Storage Initialization: The initial storage state is constructed based on the genesis configuration. This includes populating the key-value store with the defined initial state."),(0,s.kt)("p",null,"Creation of the Genesis Block: With the configuration complete and the initial state defined, the genesis block is created. This block contains no transactions and is the first block in the blockchain. Its hash becomes the reference point for all subsequent blocks."),(0,s.kt)("p",null,"Launching the Chain: With the genesis block created, the blockchain can be launched. Initial validators, as specified in the genesis configuration, begin validating, and the blockchain becomes operational."),(0,s.kt)("p",null,"Hardcoding Genesis Configuration: Optionally, developers might choose to hardcode the genesis configuration into the client software itself. This ensures that anyone using that particular client software will launch the chain with the exact same genesis configuration."),(0,s.kt)("p",null,"Chain Specification Files: In some cases, the genesis configuration is part of a broader chain specification file that includes additional information about the chain, such as boot nodes, network protocol settings, and more."),(0,s.kt)("p",null,"Custom Logic: Depending on the specific requirements of the chain, additional custom logic can be implemented during the genesis process. This might include initializing specific data structures, seeding initial on-chain data, or any other unique setup required for the particular blockchain."))}h.isMDXComponent=!0}}]);