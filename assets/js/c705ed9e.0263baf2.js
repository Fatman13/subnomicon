"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[566],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,f=p["".concat(s,".").concat(h)]||p[h]||d[h]||a;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={title:"Blocks and Bundles",sidebar_position:4,description:"Contents of Blocks and Bundles",keywords:["Consensus","Blocks","Bundles","Transactions"]},l=void 0,i={unversionedId:"consensus/blocks_and_bundles",id:"consensus/blocks_and_bundles",title:"Blocks and Bundles",description:"Contents of Blocks and Bundles",source:"@site/docs/consensus/blocks_and_bundles.md",sourceDirName:"consensus",slug:"/consensus/blocks_and_bundles",permalink:"/docs/consensus/blocks_and_bundles",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Blocks and Bundles",sidebar_position:4,description:"Contents of Blocks and Bundles",keywords:["Consensus","Blocks","Bundles","Transactions"]},sidebar:"tutorialSidebar",previous:{title:"Genesis",permalink:"/docs/consensus/genesis"},next:{title:"Security",permalink:"/docs/consensus/security"}},s={},c=[{value:"Consensus Chain Block Header",id:"consensus-chain-block-header",level:2},{value:"Domain Bundle",id:"domain-bundle",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"consensus-chain-block-header"},"Consensus Chain Block Header"),(0,r.kt)("p",null,"The consensus chain block header contains metadata about the block allowing verification of validity of the consensus chain. In Subspace, the consensus chain block header contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The block number in the chain of blocks"),(0,r.kt)("li",{parentName:"ul"},"The hash of the parent block"),(0,r.kt)("li",{parentName:"ul"},"The Merkle root of the trie of extrinsics included in this block"),(0,r.kt)("li",{parentName:"ul"},"The Merkle root of the state trie after processing this block"),(0,r.kt)("li",{parentName:"ul"},"The time slot number claimed by the block producer"),(0,r.kt)("li",{parentName:"ul"},"The global randomness at the claimed time slot derived from the proof-of-time chain"),(0,r.kt)("li",{parentName:"ul"},"The solution to the slot challenge for the claimed time slot. The solution includes a winning chunk of history, a proof-of-space for the farmer's plot and KZG witness that the winning chunk is indeed a part of the archival history at the claimed height"),(0,r.kt)("li",{parentName:"ul"},"The solution range used to find the winning chunk of history"),(0,r.kt)("li",{parentName:"ul"},"The signature of the block producer over the header")),(0,r.kt)("h2",{id:"domain-bundle"},"Domain Bundle"),(0,r.kt)("p",null,"A bundle contains multiple transactions in a particular domain (e.g. EVM contract calls) grouped together for efficient propagation and inclusion in blocks. In Subspace, a bundle contains a signed header and a list of transactions. A bundle header contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The domain ID (e.g. EVM)"),(0,r.kt)("li",{parentName:"ul"},"The operator ID of the bundle producer"),(0,r.kt)("li",{parentName:"ul"},"The Merkle root of the trie of transactions included in this bundle"),(0,r.kt)("li",{parentName:"ul"},"Execution receipt that should extend the receipt chain"),(0,r.kt)("li",{parentName:"ul"},"The size of the bundle body in bytes, used to calculate the storage cost"),(0,r.kt)("li",{parentName:"ul"},"The total estimated weight of all extrinsics in the bundle, used to prevent overloading the bundle with compute."),(0,r.kt)("li",{parentName:"ul"},"The time slot claimed by the bundle"),(0,r.kt)("li",{parentName:"ul"},"The global randomness at the claimed time slot derived from the proof-of-time chain"),(0,r.kt)("li",{parentName:"ul"},"The proof-of-election of the operator as bundle producer for the claimed time slot based on slot challenge and operator's stake in the current epoch")))}d.isMDXComponent=!0}}]);